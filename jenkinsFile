pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "sujatap12/bankapp"
        DOCKER_TAG = "latest"
        SONAR_HOST_URL = 'http://192.168.122.214:9000'
        SONAR_TOKEN = credentials('sonar-cred')  // Jenkins secret text for SonarQube
    }

    stages {

        stage('Maven Build') {
            steps {
                sh """
                    mvn clean package
                    mkdir -p target/classes
                    ls -l target/
                """
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withEnv(["SONAR_TOKEN=${env.SONAR_TOKEN}"]) {
                    sh '''
                        docker run --rm \
                          -v "$(pwd):/usr/src" \
                          -w /usr/src \
                          newtmitch/sonar-scanner \
                          sonar-scanner \
                          -Dsonar.projectKey=Java-bankapp \
                          -Dsonar.projectName=Java-bankapp \
                          -Dsonar.sources=. \
                          -Dsonar.java.binaries=target/classes \
                          -Dsonar.host.url=${SONAR_HOST_URL} \
                          -Dsonar.login=${SONAR_TOKEN} \
                          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }

        stage('Check SonarQube Quality Gate') {
            steps {
                script {
                    sleep 10 // wait for background tasks
                    def qualityStatus = sh(
                        script: """curl -s -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=Java-bankapp" | jq -r '.projectStatus.status'""",
                        returnStdout: true
                    ).trim()

                    echo "SonarQube Quality Gate Status: ${qualityStatus}"

                    if (qualityStatus != 'OK') {
                        error "SonarQube Quality Gate Failed: ${qualityStatus}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                """
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhubcred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Deploy Container') {
            steps {
                script {
                    // Stop & remove existing container if it exists
                    sh """
                        docker rm -f java-bank-container || true
                        docker run -d -p 8888:8080 --name java-bank-container ${DOCKER_IMAGE}:${DOCKER_TAG}
                        sleep 10
                        docker logs java-bank-container --tail 30
                    """
                }
            }
        }

        stage('Access Application') {
            steps {
                script {
                    echo "Accessing the application on port 8080..."
                    sh """
                        RESPONSE=\$(curl -s -X GET http://192.168.122.214:8080/ || echo 'Application not responding')
                        echo "Response from the application: \$RESPONSE"
                    """
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh """
                    docker stop java-bank-container || true
                    docker rm java-bank-container || true
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                """
            }
        }
    }
}
